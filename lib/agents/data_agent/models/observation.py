"""
Observation entity: Result of tool execution with error handling.

Schema: observation_id, call_id, status, data, error_message, error_category, execution_time_seconds
"""

from typing import Any, Optional
from enum import Enum
from pydantic import BaseModel, Field
import uuid
from datetime import datetime


class ObservationStatus(str, Enum):
    """Tool execution outcome status."""
    SUCCESS = "success"
    ERROR = "error"
    TIMEOUT = "timeout"
    POLICY_BLOCKED = "policy_blocked"


class ErrorCategory(str, Enum):
    """Classification of errors for self-repair strategy selection."""
    GROUNDING_ERROR = "grounding_error"  # Column typo, type mismatch, missing field
    EXECUTION_ERROR = "execution_error"  # Network, timeout, OOM
    POLICY_VIOLATION = "policy_violation"  # DDL/DML, PII, system table access
    UNKNOWN = "unknown"


class Observation(BaseModel):
    """
    Tool execution observation: Captures output, errors, and performance metrics.
    
    Generated by Actor executor after each tool call.
    """
    
    observation_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    call_id: str = Field(..., description="Parent tool call ID")
    status: ObservationStatus = Field(..., description="Execution outcome")
    data: Optional[Any] = Field(default=None, description="Tool output (DataFrame, plot bytes, schema)")
    error_message: Optional[str] = Field(default=None, description="Error text if failed")
    error_category: Optional[ErrorCategory] = Field(default=None, description="Error classification for repair")
    execution_time_seconds: float = Field(..., ge=0, description="Wall-clock execution time")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "observation_id": "obs-550e8400-e29b-41d4-a716-446655440000",
                    "call_id": "call-001",
                    "status": "success",
                    "data": {"rows": 12, "columns": ["month", "total"], "preview": "..."},
                    "error_message": None,
                    "error_category": None,
                    "execution_time_seconds": 2.5,
                    "timestamp": "2025-09-27T12:00:02.5Z"
                },
                {
                    "observation_id": "obs-550e8400-e29b-41d4-a716-446655440001",
                    "call_id": "call-002",
                    "status": "error",
                    "data": None,
                    "error_message": "column 'amount' does not exist; did you mean 'total_amount'?",
                    "error_category": "grounding_error",
                    "execution_time_seconds": 0.3,
                    "timestamp": "2025-09-27T12:00:03Z"
                }
            ]
        }
    
    def is_success(self) -> bool:
        """Check if tool execution succeeded."""
        return self.status == ObservationStatus.SUCCESS
    
    def needs_repair(self) -> bool:
        """Check if error can be repaired (grounding errors are repairable)."""
        return (
            self.status == ObservationStatus.ERROR
            and self.error_category == ErrorCategory.GROUNDING_ERROR
        )