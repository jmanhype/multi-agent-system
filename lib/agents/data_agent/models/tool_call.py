"""
ToolCall entity: Grounded tool invocation with validated arguments.

Schema: call_id, task_id, tool_name, arguments, timestamp, attempt_number
"""

from typing import Any, Dict
from pydantic import BaseModel, Field
import uuid
from datetime import datetime


class ToolCall(BaseModel):
    """
    Grounded tool call: Subtask translated to concrete tool invocation.
    
    Generated by Actor grounding phase, executed by Actor executor.
    """
    
    call_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    task_id: str = Field(..., description="Parent subtask ID from plan")
    tool_name: str = Field(..., description="Tool identifier (sql_runner, df_operations, plotter, profiler)")
    arguments: Dict[str, Any] = Field(..., description="Tool-specific validated arguments")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    attempt_number: int = Field(default=1, ge=1, le=3, description="Retry attempt (1-3, for self-repair)")
    
    class Config:
        json_schema_extra = {
            "example": {
                "call_id": "call-550e8400-e29b-41d4-a716-446655440000",
                "task_id": "sub-001",
                "tool_name": "sql_runner",
                "arguments": {
                    "query": "SELECT date_trunc('month', order_date) as month, SUM(amount) as total FROM sales WHERE state = $1 AND order_date >= $2 AND order_date < $3 GROUP BY month ORDER BY month",
                    "parameters": ["Arizona", "2021-01-01", "2021-04-01"],
                    "timeout_seconds": 30,
                    "row_limit": 10000
                },
                "timestamp": "2025-09-27T12:00:00Z",
                "attempt_number": 1
            }
        }
    
    def is_retry(self) -> bool:
        """Check if this is a retry attempt (self-repair)."""
        return self.attempt_number > 1
    
    def can_retry(self) -> bool:
        """Check if another retry is allowed (K=3 max attempts)."""
        return self.attempt_number < 3